
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "TAF"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('TAF')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("TAF-package")
> ### * TAF-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TAF-package
> ### Title: Transparent Assessment Framework for Reproducible Research
> ### Aliases: TAF-package TAF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.example("linreg")
> ##D setwd("linreg")
> ##D taf.boot()
> ##D source.all()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("catage.long")
> ### * catage.long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catage.long
> ### Title: Catch at Age in Long Format
> ### Aliases: catage.long
> 
> ### ** Examples
> 
> catage.long
   Year Age   Catch
1  1963   1  19.347
2  1964   1  13.052
3  1965   1 113.655
4  1966   1 126.508
5  1967   1  60.962
6  1968   1  36.915
7  1969   1   5.434
8  1970   1 107.177
9  1963   2  62.280
10 1964   2  28.541
11 1965   2  58.227
12 1966   2  84.327
13 1967   2  95.275
14 1968   2 106.373
15 1969   2  32.840
16 1970   2  42.403
17 1963   3   7.028
18 1964   3  20.118
19 1965   3  17.646
20 1966   3  29.766
21 1967   3  32.689
22 1968   3  42.569
23 1969   3  31.532
24 1970   3  18.547
25 1963   4   3.519
26 1964   4   4.285
27 1965   4   9.135
28 1966   4   6.153
29 1967   4  11.205
30 1968   4  12.330
31 1969   4  13.641
32 1970   4  13.272
> long2taf(catage.long)
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> 
> 
> 
> cleanEx()
> nameEx("catage.taf")
> ### * catage.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catage.taf
> ### Title: Catch at Age in TAF Format
> ### Aliases: catage.taf
> 
> ### ** Examples
> 
> catage.taf
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> taf2long(catage.taf)
   Year Age   Value
1  1963   1  19.347
2  1964   1  13.052
3  1965   1 113.655
4  1966   1 126.508
5  1967   1  60.962
6  1968   1  36.915
7  1969   1   5.434
8  1970   1 107.177
9  1963   2  62.280
10 1964   2  28.541
11 1965   2  58.227
12 1966   2  84.327
13 1967   2  95.275
14 1968   2 106.373
15 1969   2  32.840
16 1970   2  42.403
17 1963   3   7.028
18 1964   3  20.118
19 1965   3  17.646
20 1966   3  29.766
21 1967   3  32.689
22 1968   3  42.569
23 1969   3  31.532
24 1970   3  18.547
25 1963   4   3.519
26 1964   4   4.285
27 1965   4   9.135
28 1966   4   6.153
29 1967   4  11.205
30 1968   4  12.330
31 1969   4  13.641
32 1970   4  13.272
> taf2xtab(catage.taf)
           1       2      3      4
1963  19.347  62.280  7.028  3.519
1964  13.052  28.541 20.118  4.285
1965 113.655  58.227 17.646  9.135
1966 126.508  84.327 29.766  6.153
1967  60.962  95.275 32.689 11.205
1968  36.915 106.373 42.569 12.330
1969   5.434  32.840 31.532 13.641
1970 107.177  42.403 18.547 13.272
> 
> 
> 
> cleanEx()
> nameEx("catage.wide")
> ### * catage.wide
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catage.wide
> ### Title: Catch at Age in Wide Format
> ### Aliases: catage.wide
> 
> ### ** Examples
> 
> catage.wide
  Area Year       1       2      3      4
1    1 1963  19.347  62.280  7.028  3.519
2    1 1964  13.052  28.541 20.118  4.285
3    1 1965 113.655  58.227 17.646  9.135
4    1 1966 126.508  84.327 29.766  6.153
5    2 1963  38.694 124.560 14.056  7.038
6    2 1964  26.104  57.082 40.236  8.570
7    2 1965 227.310 116.454 35.292 18.270
8    2 1966 253.016 168.654 59.532 12.306
> wide2long(catage.wide)
   Area Year Age   Value
1     1 1963   1  19.347
2     1 1964   1  13.052
3     1 1965   1 113.655
4     1 1966   1 126.508
5     2 1963   1  38.694
6     2 1964   1  26.104
7     2 1965   1 227.310
8     2 1966   1 253.016
9     1 1963   2  62.280
10    1 1964   2  28.541
11    1 1965   2  58.227
12    1 1966   2  84.327
13    2 1963   2 124.560
14    2 1964   2  57.082
15    2 1965   2 116.454
16    2 1966   2 168.654
17    1 1963   3   7.028
18    1 1964   3  20.118
19    1 1965   3  17.646
20    1 1966   3  29.766
21    2 1963   3  14.056
22    2 1964   3  40.236
23    2 1965   3  35.292
24    2 1966   3  59.532
25    1 1963   4   3.519
26    1 1964   4   4.285
27    1 1965   4   9.135
28    1 1966   4   6.153
29    2 1963   4   7.038
30    2 1964   4   8.570
31    2 1965   4  18.270
32    2 1966   4  12.306
> 
> 
> 
> cleanEx()
> nameEx("catage.xtab")
> ### * catage.xtab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catage.xtab
> ### Title: Catch at Age in Crosstab Format
> ### Aliases: catage.xtab
> 
> ### ** Examples
> 
> catage.xtab
           1       2      3      4
1963  19.347  62.280  7.028  3.519
1964  13.052  28.541 20.118  4.285
1965 113.655  58.227 17.646  9.135
1966 126.508  84.327 29.766  6.153
1967  60.962  95.275 32.689 11.205
1968  36.915 106.373 42.569 12.330
1969   5.434  32.840 31.532 13.641
1970 107.177  42.403 18.547 13.272
> xtab2taf(catage.xtab)
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> 
> 
> 
> cleanEx()
> nameEx("check.software")
> ### * check.software
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.software
> ### Title: Check SOFTWARE.bib Against Global Packages
> ### Aliases: check.software
> 
> ### ** Examples
> 
> ## Not run: 
> ##D check.software()
> ##D check.software(full=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Clean TAF Directories
> ### Aliases: clean
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean()
> ##D clean.boot()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clean.boot")
> ### * clean.boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean.boot
> ### Title: Clean Boot Directory
> ### Aliases: clean.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean()
> ##D clean.boot()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clean.data")
> ### * clean.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean.data
> ### Title: Clean Data
> ### Aliases: clean.data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean.data()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clean.library")
> ### * clean.library
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean.library
> ### Title: Clean TAF Library
> ### Aliases: clean.library
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean.library()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clean.software")
> ### * clean.software
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean.software
> ### Title: Clean TAF Software
> ### Aliases: clean.software
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean.software()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("convert.spaces")
> ### * convert.spaces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert.spaces
> ### Title: Convert Spaces
> ### Aliases: convert.spaces
> 
> ### ** Examples
> 
> ## Not run: 
> ##D write(pi, "A B.txt")
> ##D convert.spaces("A B.txt")
> ##D 
> ##D # Many files
> ##D convert.spaces("boot/initial/data/*")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("cp")
> ### * cp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cp
> ### Title: Copy Files
> ### Aliases: cp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D write(pi, "A.txt")
> ##D cp("A.txt", "B.txt")
> ##D cp("A.txt", "B.txt", move=TRUE)
> ##D 
> ##D # Copy directory tree
> ##D cp(system.file(package="datasets"), ".")
> ##D mkdir("everything")
> ##D cp("datasets/*", "everything")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ddim")
> ### * ddim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ddim
> ### Title: Data Dimensions
> ### Aliases: ddim
> 
> ### ** Examples
> 
> # Long table format, 8 years and 4 ages
> ddim(catage.long)
Year  Age 
   8    4 
> 
> # Some base R datasets
> ddim(esoph[-5])
agegp alcgp tobgp 
    6     4     4 
> ddim(rev(warpbreaks))
tension    wool 
      3       2 
> ddim(rev(ToothGrowth))
dose supp 
   3    2 
> 
> 
> 
> 
> cleanEx()
> nameEx("deps")
> ### * deps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deps
> ### Title: Dependencies of a Workflow
> ### Aliases: deps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir <- system.file(package="MASS", "scripts")
> ##D script <- system.file(package="MASS", "scripts/ch08.R")
> ##D 
> ##D deps(script)                   # dependencies
> ##D deps(script, base=TRUE)        # including base packages
> ##D deps(script, installed=FALSE)  # not (yet) installed
> ##D 
> ##D deps(dir)
> ##D deps(dir, list=TRUE)
> ##D 
> ##D deps(dir, available=FALSE)  # dependencies that might be unavailable
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("detach.packages")
> ### * detach.packages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detach.packages
> ### Title: Detach Packages
> ### Aliases: detach.packages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D detach.packages()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("dir.tree")
> ### * dir.tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dir.tree
> ### Title: Directory Tree
> ### Aliases: dir.tree
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- system.file("examples", package="TAF")
> ##D dir.tree(path)
> ##D cbind(dir(recursive=TRUE, include.dirs=TRUE))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("div")
> ### * div
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: div
> ### Title: Divide Columns
> ### Aliases: div
> 
> ### ** Examples
> 
> # These are equivalent:
> 
> x1 <- div(summary.taf, c("Rec","Rec_lo","Rec_hi",
+                          "TSB","TSB_lo","TSB_hi",
+                          "SSB","SSB_lo","SSB_hi",
+                          "Removals","Removals_lo","Removals_hi"))
> 
> x2 <- div(summary.taf, "Rec|TSB|SSB|Removals", grep=TRUE)
> 
> x3 <- div(summary.taf, "Year|Fbar", grep=TRUE, invert=TRUE)
> 
> # Less reliable in scripts if columns have been added/deleted/reordered:
> 
> x4 <- div(summary.taf, 2:13)
> 
> 
> 
> 
> cleanEx()
> nameEx("dos2unix")
> ### * dos2unix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dos2unix
> ### Title: Convert Line Endings
> ### Aliases: dos2unix unix2dos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D file <- "test.txt"
> ##D write("123", file)
> ##D 
> ##D dos2unix(file)
> ##D file.size(file)
> ##D 
> ##D unix2dos(file)
> ##D file.size(file)
> ##D 
> ##D file.remove(file)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("download")
> ### * download
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download
> ### Title: Download File
> ### Aliases: download
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- paste0("https://github.com/ices-taf/2015_had-iceg/raw/master/",
> ##D               "bootstrap/initial/software/catageysa/catageysa.exe")
> ##D download(url)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("download.github")
> ### * download.github
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download.github
> ### Title: Download GitHub Repository
> ### Aliases: download.github
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify release tag
> ##D download.github("ices-tools-prod/icesAdvice@1.3-0")
> ##D 
> ##D # Specify SHA reference code
> ##D download.github("ices-tools-prod/icesAdvice@4271797")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("draft.data")
> ### * draft.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draft.data
> ### Title: Draft DATA.bib
> ### Aliases: draft.data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Print in console
> ##D draft.data("WGEF", 2015)
> ##D 
> ##D # Export to file
> ##D draft.data("WGEF", 2015, file=TRUE)
> ##D 
> ##D # Empty entry, to complete by hand
> ##D draft.data(data.files="")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("draft.readme")
> ### * draft.readme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draft.readme
> ### Title: Draft Readme
> ### Aliases: draft.readme
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Print in console
> ##D draft.readme()
> ##D 
> ##D # Export to file
> ##D draft.readme(file=TRUE)
> ##D 
> ##D # Specify title
> ##D draft.readme("Yellowfin tuna in the western and central Pacific")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("draft.software")
> ### * draft.software
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draft.software
> ### Title: Draft SOFTWARE.bib
> ### Aliases: draft.software
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Export to file
> ##D draft.software("TAF", file=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("file.encoding")
> ### * file.encoding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file.encoding
> ### Title: File Encoding
> ### Aliases: file.encoding
> 
> ### ** Examples
> 
> ## Not run: 
> ##D file.base <- system.file(package="base", "DESCRIPTION")
> ##D file.nlme <- system.file(package="nlme", "DESCRIPTION")
> ##D file.encoding(file.base)  # ASCII
> ##D file.encoding(file.nlme)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("flr2taf")
> ### * flr2taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: flr2taf
> ### Title: Convert FLR Table to TAF Format
> ### Aliases: flr2taf
> 
> ### ** Examples
> 
> x <- array(t(catage.xtab), dim=c(4,8,1,1,1,1))
> dimnames(x) <- list(age=1:4, year=1963:1970,
+                     unit="unique", season="all", area="unique", iter=1)
> flr2taf(x)
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> 
> x1 <- x[1,,,,,,drop=FALSE]
> flr2taf(x1)
  Year   Value
1 1963  19.347
2 1964  13.052
3 1965 113.655
4 1966 126.508
5 1967  60.962
6 1968  36.915
7 1969   5.434
8 1970 107.177
> flr2taf(x1, "Juveniles")
  Year Juveniles
1 1963    19.347
2 1964    13.052
3 1965   113.655
4 1966   126.508
5 1967    60.962
6 1968    36.915
7 1969     5.434
8 1970   107.177
> 
> 
> 
> 
> cleanEx()
> nameEx("get.remote.sha")
> ### * get.remote.sha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.remote.sha
> ### Title: Get Remote SHA
> ### Aliases: get.remote.sha
> 
> ### ** Examples
> 
> ## Not run: 
> ##D get.remote.sha("ices-tools-prod", "icesAdvice", "master")
> ##D get.remote.sha("ices-tools-prod", "icesAdvice", "1.3-0")
> ##D get.remote.sha("ices-tools-prod", "icesAdvice", "1.3-0", seven=FALSE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("git.repo")
> ### * git.repo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: git.repo
> ### Title: Git Repo
> ### Aliases: git.repo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D git.repo()
> ##D git.repo(owner=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("install.deps")
> ### * install.deps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install.deps
> ### Title: Install Dependencies
> ### Aliases: install.deps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Download a TAF analysis
> ##D download(file.path("https://github.com/ices-taf/2019_san.sa.6",
> ##D                    "archive/refs/heads/master.zip"))
> ##D unzip("master.zip")
> ##D setwd("2019_san.sa.6-master")
> ##D 
> ##D # List dependencies
> ##D deps()
> ##D deps(taf.boot.path())
> ##D 
> ##D # Install dependencies that are not already installed
> ##D install.deps()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("is.r.package")
> ### * is.r.package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.r.package
> ### Title: Is R Package
> ### Aliases: is.r.package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D is.r.package("boot/software/SAM.tar.gz")
> ##D is.r.package("boot/software/stockassessment.tar.gz")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("latin1.to.utf8")
> ### * latin1.to.utf8
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latin1.to.utf8
> ### Title: Convert File Encoding
> ### Aliases: latin1.to.utf8 utf8.to.latin1
> 
> ### ** Examples
> 
> ## Not run: 
> ##D utf8.to.latin1("data.txt")
> ##D latin1.to.utf8("data.txt")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("lim")
> ### * lim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lim
> ### Title: Axis Limits
> ### Aliases: lim
> 
> ### ** Examples
> 
> plot(precip)
> plot(precip, ylim=lim(precip))
> plot(precip, ylim=lim(precip), yaxs="i")
> 
> 
> 
> 
> cleanEx()
> nameEx("line.endings")
> ### * line.endings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: line.endings
> ### Title: Line Endings
> ### Aliases: line.endings
> 
> ### ** Examples
> 
> ## Not run: 
> ##D file <- system.file(package="TAF", "DESCRIPTION")
> ##D line.endings(file)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("linreg")
> ### * linreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: linreg
> ### Title: Linear Regression
> ### Aliases: linreg
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.example("linreg")
> ##D setwd("linreg")
> ##D taf.boot()
> ##D source.all()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("long2taf")
> ### * long2taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: long2taf
> ### Title: Convert Long Table to TAF Format
> ### Aliases: long2taf
> 
> ### ** Examples
> 
> long2taf(catage.long)
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("long2xtab")
> ### * long2xtab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: long2xtab
> ### Title: Convert Long Table to Crosstab Format
> ### Aliases: long2xtab
> 
> ### ** Examples
> 
> long2xtab(catage.long)
           1       2      3      4
1963  19.347  62.280  7.028  3.519
1964  13.052  28.541 20.118  4.285
1965 113.655  58.227 17.646  9.135
1966 126.508  84.327 29.766  6.153
1967  60.962  95.275 32.689 11.205
1968  36.915 106.373 42.569 12.330
1969   5.434  32.840 31.532 13.641
1970 107.177  42.403 18.547 13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("make")
> ### * make
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make
> ### Title: Run R Script if Needed
> ### Aliases: make
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Here, model.R uses input.dat, creating results.dat
> ##D make("model.R", "data/input.dat", "model/results.dat")
> ##D make("model.R", "data/input.dat", "model/results.dat", quiet=FALSE)
> ##D make("model.R", "data/input.dat", "model/results.dat", details=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("make.all")
> ### * make.all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.all
> ### Title: Run All TAF Scripts as Needed
> ### Aliases: make.all makeAll
> 
> ### ** Examples
> 
> ## Not run: 
> ##D make.all()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("make.taf")
> ### * make.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.taf
> ### Title: Run TAF Script if Needed
> ### Aliases: make.taf makeTAF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D make.taf("model.R")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mkdir")
> ### * mkdir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mkdir
> ### Title: Create Directory
> ### Aliases: mkdir
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mkdir("emptydir")
> ##D rmdir("emptydir")
> ##D 
> ##D mkdir("outer/inner")
> ##D rmdir("outer", recursive=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("msg")
> ### * msg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: msg
> ### Title: Show Message
> ### Aliases: msg
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("os")
> ### * os
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: os
> ### Title: Operating System
> ### Aliases: os os.linux os.macos os.windows os.unix
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("pdeps")
> ### * pdeps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdeps
> ### Title: Dependencies of a Package
> ### Aliases: pdeps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # TAF dependencies
> ##D pdeps("TAF")                # does not depend on non-base packages
> ##D pdeps("TAF", base=TRUE)     # depends on these base packages
> ##D pdeps("TAF", reverse=TRUE)  # icesTAF depends on TAF
> ##D 
> ##D # Other packages with light dependencies
> ##D sapply(pdeps(c("data.table", "Rcpp", "renv")), length)
> ##D 
> ##D # ggplot2 dependencies
> ##D pdeps("ggplot2")                   # full list of dependencies
> ##D pdeps("ggplot2", recursive=FALSE)  # primary dependencies
> ##D 
> ##D # Each ggplot2 dependency brings in these secondary dependencies
> ##D pdeps(pdeps("ggplot2", recursive=FALSE)$ggplot2)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("period")
> ### * period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: period
> ### Title: Period
> ### Aliases: period
> 
> ### ** Examples
> 
> period(1963, 1970)
[1] "1963-1970"
> period(c(1963, 1970))
[1] "1963-1970"
> period(1963:1970)
[1] "1963-1970"
> 
> period(range(catage.taf$Year))
[1] "1963-1970"
> period(catage.taf$Year)
[1] "1963-1970"
> period(catage.taf)
[1] "1963-1970"
> period(catage.xtab)
[1] "1963-1970"
> period(catage.long)
[1] "1963-1970"
> 
> 
> 
> 
> cleanEx()
> nameEx("plus")
> ### * plus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plus
> ### Title: Rename Plus Group Column
> ### Aliases: plus
> 
> ### ** Examples
> 
> catage <- catage.taf
> 
> # Rename last column
> catage <- plus(catage)
> 
> # Shorter and less error-prone than
> names(catage)[names(catage)=="4"] <- "4+"
> 
> 
> 
> 
> cleanEx()
> nameEx("read.bib")
> ### * read.bib
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.bib
> ### Title: Read Metadata Entries
> ### Aliases: read.bib
> 
> ### ** Examples
> 
> ## Not run: 
> ##D bib <- read.bib("DATA.bib")
> ##D str(bib)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("read.taf")
> ### * read.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.taf
> ### Title: Read TAF Table
> ### Aliases: read.taf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D write.taf(catage.taf, "catage.csv")
> ##D catage <- read.taf("catage.csv")
> ##D 
> ##D write.taf(catage)
> ##D file.remove("catage.csv")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("rmdir")
> ### * rmdir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmdir
> ### Title: Remove Empty Directory
> ### Aliases: rmdir
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mkdir("emptydir")
> ##D rmdir("emptydir")
> ##D 
> ##D mkdir("outer/inner")
> ##D rmdir("outer", recursive=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("rnd")
> ### * rnd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rnd
> ### Title: Round Columns
> ### Aliases: rnd
> 
> ### ** Examples
> 
> # With rnd() we no longer need to repeat the column names:
> 
> m <- mtcars
> m[c("mpg","disp","qsec")] <- round(m[c("mpg","disp","qsec")])
> m <- rnd(m, c("mpg","disp","qsec"))
> 
> # The x1/x2/x3/x4 approaches are equivalent:
> 
> x1 <- rnd(summary.taf, c("Rec","Rec_lo","Rec_hi",
+                          "TSB","TSB_lo","TSB_hi",
+                          "SSB","SSB_lo","SSB_hi",
+                          "Removals","Removals_lo","Removals_hi"))
> x1 <- rnd(x1, c("Fbar","Fbar_lo","Fbar_hi"), 3)
> 
> x2 <- rnd(summary.taf, "Rec|TSB|SSB|Removals", grep=TRUE)
> x2 <- rnd(x2, "Fbar", 3, grep=TRUE)
> 
> x3 <- rnd(summary.taf, "Fbar", grep=TRUE, invert=TRUE)
> x3 <- rnd(x3, "Fbar", 3, grep=TRUE)
> 
> # Less reliable in scripts if columns have been added/deleted/reordered:
> 
> x4 <- rnd(summary.taf, 2:13)
> x4 <- rnd(x4, 14:16, 3)
> 
> 
> 
> 
> cleanEx()
> nameEx("sam2taf")
> ### * sam2taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sam2taf
> ### Title: Convert SAM Table to TAF Format
> ### Aliases: sam2taf
> 
> ### ** Examples
> 
> # Example objects
> x <- as.matrix(summary.taf[grep("SSB", names(summary.taf))])
> rec <- as.matrix(summary.taf[grep("Rec", names(summary.taf))])
> tsb <- as.matrix(summary.taf[grep("TSB", names(summary.taf))])
> dimnames(x) <- list(summary.taf$Year, c("Estimate", "Low", "High"))
> dimnames(rec) <- dimnames(tsb) <- dimnames(x)
> 
> # One SAM table, arbitrary object name
> sam2taf(x)
  Year Estimate Estimate_lo Estimate_hi
1 1963 151903.4    116620.5    197861.0
2 1964 163080.6    128014.7    207751.9
3 1965 199187.1    161241.7    246062.3
> sam2taf(x, "SSB")
  Year      SSB   SSB_lo   SSB_hi
1 1963 151903.4 116620.5 197861.0
2 1964 163080.6 128014.7 207751.9
3 1965 199187.1 161241.7 246062.3
> sam2taf(x, "SSB", year=FALSE)
       SSB   SSB_lo   SSB_hi
1 151903.4 116620.5 197861.0
2 163080.6 128014.7 207751.9
3 199187.1 161241.7 246062.3
> 
> # Many SAM tables, recognized names
> sam2taf(rec)
  Year       Rec   Rec_lo    Rec_hi
1 1963  487477.8 358326.5  663178.9
2 1964  802109.2 590709.7 1089162.9
3 1965 1042362.2 770072.5 1410930.5
> data.frame(sam2taf(rec), sam2taf(tsb, year=FALSE))
  Year       Rec   Rec_lo    Rec_hi      TSB   TSB_lo   TSB_hi
1 1963  487477.8 358326.5  663178.9 511959.1 438909.3 597166.9
2 1964  802109.2 590709.7 1089162.9 661986.2 563846.9 777207.0
3 1965 1042362.2 770072.5 1410930.5 834009.4 718023.8 968730.8
> 
> ## Not run: 
> ##D 
> ##D # Accessing tables from SAM fit object
> ##D data.frame(sam2taf(rectable(fit)), sam2taf(tsbtable(fit), year=FALSE))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("source.all")
> ### * source.all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: source.all
> ### Title: Run All TAF Scripts
> ### Aliases: source.all sourceAll
> 
> ### ** Examples
> 
> ## Not run: 
> ##D source.all()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("source.dir")
> ### * source.dir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: source.dir
> ### Title: Source Directory
> ### Aliases: source.dir sourceDir
> 
> ### ** Examples
> 
> ## Not run: 
> ##D source.dir("boot/software/utilities")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("source.taf")
> ### * source.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: source.taf
> ### Title: Run TAF Script
> ### Aliases: source.taf sourceTAF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D write("print(pi)", "script.R")
> ##D source("script.R")
> ##D source.taf("script.R")
> ##D file.remove("script.R")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("summary.taf")
> ### * summary.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.taf
> ### Title: Summary Results in TAF Format
> ### Aliases: summary.taf
> 
> ### ** Examples
> 
> summary.taf
  Year       Rec   Rec_lo    Rec_hi      TSB   TSB_lo   TSB_hi      SSB
1 1963  487477.8 358326.5  663178.9 511959.1 438909.3 597166.9 151903.4
2 1964  802109.2 590709.7 1089162.9 661986.2 563846.9 777207.0 163080.6
3 1965 1042362.2 770072.5 1410930.5 834009.4 718023.8 968730.8 199187.1
    SSB_lo   SSB_hi Removals Removals_lo Removals_hi      Fbar   Fbar_lo
1 116620.5 197861.0 117830.2    104452.7    132921.0 0.4728013 0.4097263
2 128014.7 207751.9 144929.1    131184.0    160114.4 0.5154990 0.4526437
3 161241.7 246062.3 199187.1    177659.1    223323.8 0.5668220 0.4980653
    Fbar_hi
1 0.5455865
2 0.5870825
3 0.6450703
> x <- div(summary.taf, "Rec|TSB|SSB|Removals", grep=TRUE)
> x <- rnd(x, "Rec|TSB|SSB|Removals", grep=TRUE)
> x <- rnd(x, "Fbar", 3, grep=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("taf.boot")
> ### * taf.boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.boot
> ### Title: Boot TAF Analysis
> ### Aliases: taf.boot taf.bootstrap
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.boot()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.boot.path")
> ### * taf.boot.path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.boot.path
> ### Title: Construct Boot Path
> ### Aliases: taf.boot.path
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.boot.path()
> ##D taf.boot.path("software")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.colors")
> ### * taf.colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.colors
> ### Title: TAF Colors
> ### Aliases: taf.colors taf.green taf.orange taf.blue taf.dark taf.light
> 
> ### ** Examples
> 
> taf.green
[1] "#80d090"
> 
> opar <- par(mfrow=c(3,1))
> barplot(5:1, main="Five",
+         col=c(taf.green, taf.orange, taf.blue, taf.dark, taf.light))
> 
> barplot(6:1, main="Six", col=c(taf.green, taf.orange, taf.blue,
+                                taf.dark, taf.light, "white"))
> 
> barplot(7:1, main="Seven", col=c("black", taf.dark, taf.light,
+                                  taf.green, taf.orange, taf.blue, "white"))
> par(opar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("taf.data.path")
> ### * taf.data.path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.data.path
> ### Title: Construct Boot Data Path
> ### Aliases: taf.data.path
> 
> ### ** Examples
> 
> taf.data.path()
[1] "boot/data"
> taf.data.path("example.dat")
[1] "boot/data/example.dat"
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.example")
> ### * taf.example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.example
> ### Title: TAF Example
> ### Aliases: taf.example
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.example("linreg")
> ##D setwd("linreg")
> ##D taf.boot()
> ##D source.all()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.install")
> ### * taf.install
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.install
> ### Title: TAF Install
> ### Aliases: taf.install
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Install one package
> ##D taf.install("boot/software/FLAssess_f1e5acb.tar.gz")
> ##D 
> ##D # Install all packages found in boot/software
> ##D taf.install()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.libPaths")
> ### * taf.libPaths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.libPaths
> ### Title: Add TAF Library Path
> ### Aliases: taf.libPaths
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.libraries")
> ### * taf.libraries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.libraries
> ### Title: TAF Libraries
> ### Aliases: taf.libraries
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load all packages in TAF library
> ##D taf.libraries()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.library")
> ### * taf.library
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.library
> ### Title: TAF Library
> ### Aliases: taf.library
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Show packages in TAF library
> ##D taf.library()
> ##D 
> ##D # Load packages
> ##D taf.library(this)
> ##D taf.library(that)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.png")
> ### * taf.png
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.png
> ### Title: PNG Device
> ### Aliases: taf.png tafpng
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.png("myplot")
> ##D plot(1)
> ##D dev.off()
> ##D 
> ##D library(lattice)
> ##D taf.png("mytrellis")
> ##D xyplot(1~1)
> ##D dev.off()
> ##D 
> ##D library(ggplot2)
> ##D taf.png("myggplot")
> ##D qplot(1, 1)
> ##D dev.off()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.session")
> ### * taf.session
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.session
> ### Title: TAF Session
> ### Aliases: taf.session
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.skeleton")
> ### * taf.skeleton
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.skeleton
> ### Title: TAF Skeleton
> ### Aliases: taf.skeleton
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.skeleton()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.sources")
> ### * taf.sources
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.sources
> ### Title: List Sources
> ### Aliases: taf.sources
> 
> ### ** Examples
> 
> ## Not run: 
> ##D taf.sources("data")
> ##D taf.sources("software")
> ##D taf.sources("both")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf.unzip")
> ### * taf.unzip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf.unzip
> ### Title: Unzip File
> ### Aliases: taf.unzip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D exefile <- if(os.unix()) "run" else "run.exe"
> ##D taf.unzip("boot/software/archive.zip", files=exefile, exdir="model")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("taf2html")
> ### * taf2html
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf2html
> ### Title: Convert TAF Table to HTML
> ### Aliases: taf2html
> 
> ### ** Examples
> 
> taf2html(catage.taf)
<table>
  <tr><th>Year<th>1<th>2<th>3<th>4
  <tr><td>1963<td>19.347<td>62.280<td>7.028<td>3.519
  <tr><td>1964<td>13.052<td>28.541<td>20.118<td>4.285
  <tr><td>1965<td>113.655<td>58.227<td>17.646<td>9.135
  <tr><td>1966<td>126.508<td>84.327<td>29.766<td>6.153
  <tr><td>1967<td>60.962<td>95.275<td>32.689<td>11.205
  <tr><td>1968<td>36.915<td>106.373<td>42.569<td>12.330
  <tr><td>1969<td>5.434<td>32.840<td>31.532<td>13.641
  <tr><td>1970<td>107.177<td>42.403<td>18.547<td>13.272
</table>
> taf2html(catage.taf, align=c("L","R","R","R","R"))
<table>
  <tr><th style="text-align:left">Year<th style="text-align:right">1<th style="text-align:right">2<th style="text-align:right">3<th style="text-align:right">4
  <tr><td style="text-align:left">1963<td style="text-align:right">19.347<td style="text-align:right">62.280<td style="text-align:right">7.028<td style="text-align:right">3.519
  <tr><td style="text-align:left">1964<td style="text-align:right">13.052<td style="text-align:right">28.541<td style="text-align:right">20.118<td style="text-align:right">4.285
  <tr><td style="text-align:left">1965<td style="text-align:right">113.655<td style="text-align:right">58.227<td style="text-align:right">17.646<td style="text-align:right">9.135
  <tr><td style="text-align:left">1966<td style="text-align:right">126.508<td style="text-align:right">84.327<td style="text-align:right">29.766<td style="text-align:right">6.153
  <tr><td style="text-align:left">1967<td style="text-align:right">60.962<td style="text-align:right">95.275<td style="text-align:right">32.689<td style="text-align:right">11.205
  <tr><td style="text-align:left">1968<td style="text-align:right">36.915<td style="text-align:right">106.373<td style="text-align:right">42.569<td style="text-align:right">12.330
  <tr><td style="text-align:left">1969<td style="text-align:right">5.434<td style="text-align:right">32.840<td style="text-align:right">31.532<td style="text-align:right">13.641
  <tr><td style="text-align:left">1970<td style="text-align:right">107.177<td style="text-align:right">42.403<td style="text-align:right">18.547<td style="text-align:right">13.272
</table>
> 
> ## Not run: 
> ##D taf2html(catage.taf, "catage.html")
> ##D taf2html(catage.taf, "catage.html", align=c("L","R","R","R","R"),
> ##D          append=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("taf2long")
> ### * taf2long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf2long
> ### Title: Convert TAF Table to Long Format
> ### Aliases: taf2long
> 
> ### ** Examples
> 
> taf2long(catage.taf, names=c("Year","Age","Catch"))
   Year Age   Catch
1  1963   1  19.347
2  1964   1  13.052
3  1965   1 113.655
4  1966   1 126.508
5  1967   1  60.962
6  1968   1  36.915
7  1969   1   5.434
8  1970   1 107.177
9  1963   2  62.280
10 1964   2  28.541
11 1965   2  58.227
12 1966   2  84.327
13 1967   2  95.275
14 1968   2 106.373
15 1969   2  32.840
16 1970   2  42.403
17 1963   3   7.028
18 1964   3  20.118
19 1965   3  17.646
20 1966   3  29.766
21 1967   3  32.689
22 1968   3  42.569
23 1969   3  31.532
24 1970   3  18.547
25 1963   4   3.519
26 1964   4   4.285
27 1965   4   9.135
28 1966   4   6.153
29 1967   4  11.205
30 1968   4  12.330
31 1969   4  13.641
32 1970   4  13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("taf2xtab")
> ### * taf2xtab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taf2xtab
> ### Title: Convert TAF Table to Crosstab Format
> ### Aliases: taf2xtab
> 
> ### ** Examples
> 
> taf2xtab(catage.taf)
           1       2      3      4
1963  19.347  62.280  7.028  3.519
1964  13.052  28.541 20.118  4.285
1965 113.655  58.227 17.646  9.135
1966 126.508  84.327 29.766  6.153
1967  60.962  95.275 32.689 11.205
1968  36.915 106.373 42.569 12.330
1969   5.434  32.840 31.532 13.641
1970 107.177  42.403 18.547 13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("tt")
> ### * tt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tt
> ### Title: TAF Transpose
> ### Aliases: tt
> 
> ### ** Examples
> 
> taf2xtab(catage.taf)
           1       2      3      4
1963  19.347  62.280  7.028  3.519
1964  13.052  28.541 20.118  4.285
1965 113.655  58.227 17.646  9.135
1966 126.508  84.327 29.766  6.153
1967  60.962  95.275 32.689 11.205
1968  36.915 106.373 42.569 12.330
1969   5.434  32.840 31.532 13.641
1970 107.177  42.403 18.547 13.272
> tt(catage.taf)
    1963   1964    1965    1966   1967    1968   1969    1970
1 19.347 13.052 113.655 126.508 60.962  36.915  5.434 107.177
2 62.280 28.541  58.227  84.327 95.275 106.373 32.840  42.403
3  7.028 20.118  17.646  29.766 32.689  42.569 31.532  18.547
4  3.519  4.285   9.135   6.153 11.205  12.330 13.641  13.272
> tt(catage.taf, TRUE)
  Age   1963   1964    1965    1966   1967    1968   1969    1970
1   1 19.347 13.052 113.655 126.508 60.962  36.915  5.434 107.177
2   2 62.280 28.541  58.227  84.327 95.275 106.373 32.840  42.403
3   3  7.028 20.118  17.646  29.766 32.689  42.569 31.532  18.547
4   4  3.519  4.285   9.135   6.153 11.205  12.330 13.641  13.272
> tt(catage.taf, "Custom")
  Custom   1963   1964    1965    1966   1967    1968   1969    1970
1      1 19.347 13.052 113.655 126.508 60.962  36.915  5.434 107.177
2      2 62.280 28.541  58.227  84.327 95.275 106.373 32.840  42.403
3      3  7.028 20.118  17.646  29.766 32.689  42.569 31.532  18.547
4      4  3.519  4.285   9.135   6.153 11.205  12.330 13.641  13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("wide2long")
> ### * wide2long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wide2long
> ### Title: Convert Wide Table to Long Format
> ### Aliases: wide2long
> 
> ### ** Examples
> 
> wide2long(catage.wide, names=c("Age","Catch"))
   Area Year Age   Catch
1     1 1963   1  19.347
2     1 1964   1  13.052
3     1 1965   1 113.655
4     1 1966   1 126.508
5     2 1963   1  38.694
6     2 1964   1  26.104
7     2 1965   1 227.310
8     2 1966   1 253.016
9     1 1963   2  62.280
10    1 1964   2  28.541
11    1 1965   2  58.227
12    1 1966   2  84.327
13    2 1963   2 124.560
14    2 1964   2  57.082
15    2 1965   2 116.454
16    2 1966   2 168.654
17    1 1963   3   7.028
18    1 1964   3  20.118
19    1 1965   3  17.646
20    1 1966   3  29.766
21    2 1963   3  14.056
22    2 1964   3  40.236
23    2 1965   3  35.292
24    2 1966   3  59.532
25    1 1963   4   3.519
26    1 1964   4   4.285
27    1 1965   4   9.135
28    1 1966   4   6.153
29    2 1963   4   7.038
30    2 1964   4   8.570
31    2 1965   4  18.270
32    2 1966   4  12.306
> 
> 
> 
> 
> cleanEx()
> nameEx("write.taf")
> ### * write.taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write.taf
> ### Title: Write TAF Table
> ### Aliases: write.taf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D write.taf(catage.taf, "catage.csv")
> ##D catage <- read.taf("catage.csv")
> ##D 
> ##D write.taf(catage)
> ##D file.remove("catage.csv")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("xtab2long")
> ### * xtab2long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xtab2long
> ### Title: Convert Crosstab Table to Long Format
> ### Aliases: xtab2long
> 
> ### ** Examples
> 
> xtab2long(catage.xtab, names=c("Year","Age","Catch"))
   Year Age   Catch
1  1963   1  19.347
2  1964   1  13.052
3  1965   1 113.655
4  1966   1 126.508
5  1967   1  60.962
6  1968   1  36.915
7  1969   1   5.434
8  1970   1 107.177
9  1963   2  62.280
10 1964   2  28.541
11 1965   2  58.227
12 1966   2  84.327
13 1967   2  95.275
14 1968   2 106.373
15 1969   2  32.840
16 1970   2  42.403
17 1963   3   7.028
18 1964   3  20.118
19 1965   3  17.646
20 1966   3  29.766
21 1967   3  32.689
22 1968   3  42.569
23 1969   3  31.532
24 1970   3  18.547
25 1963   4   3.519
26 1964   4   4.285
27 1965   4   9.135
28 1966   4   6.153
29 1967   4  11.205
30 1968   4  12.330
31 1969   4  13.641
32 1970   4  13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("xtab2taf")
> ### * xtab2taf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xtab2taf
> ### Title: Convert Crosstab Table to TAF Format
> ### Aliases: xtab2taf
> 
> ### ** Examples
> 
> xtab2taf(catage.xtab)
  Year       1       2      3      4
1 1963  19.347  62.280  7.028  3.519
2 1964  13.052  28.541 20.118  4.285
3 1965 113.655  58.227 17.646  9.135
4 1966 126.508  84.327 29.766  6.153
5 1967  60.962  95.275 32.689 11.205
6 1968  36.915 106.373 42.569 12.330
7 1969   5.434  32.840 31.532 13.641
8 1970 107.177  42.403 18.547 13.272
> 
> 
> 
> 
> cleanEx()
> nameEx("zoom")
> ### * zoom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zoom
> ### Title: Zoom
> ### Aliases: zoom zoom.trellis
> 
> ### ** Examples
> 
> library(lattice)
> 
> xyplot(1~1)
> zoom(xyplot(1~1))
> zoom(xyplot(1~1), size=1.2)
> zoom(xyplot(1~1), axis=0.8)
> zoom(xyplot(1~1), axis=NULL)
> 
> ## Not run: 
> ##D taf.png("myplot")
> ##D plot(1)
> ##D dev.off()
> ##D 
> ##D taf.png("mytrellis")
> ##D xyplot(1~1)
> ##D dev.off()
> ##D 
> ##D taf.png("mytrellis_zoom")
> ##D zoom(xyplot(1~1))
> ##D dev.off()
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:lattice’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.222 0.01 0.23 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
